import smtplib, ssl, emailfrom email.mime.text import MIMETextfrom email.mime.multipart import MIMEMultipartimport imaplibimport loggingimport hashlibimport database_Server as dbimport jsonimport sysfrom urllib.request import urlopenfrom email import encodersfrom email.mime.base import MIMEBasewith open('Const/config.json') as i:    json_const = json.load(i)doctorEmail = json_const["Doctor_email"]def computeMD5hash(my_string):    m = hashlib.md5()    m.update(my_string.encode('utf-8'))    return m.hexdigest()def is_internet_available():    return True    # try:    #     urlopen('https://www.google.com', timeout=1)    #     return True    # except:    #     return Falsedef _sendregemail(email_content):    logging.info(email_content)    sender_email = "suneethactel@gmail.com"    receiver_email = email_content['ship_email']    password = 'cteladmin'    email_content['ship_email_pwd'] = computeMD5hash(email_content['ship_email_pwd'])    email_content['ship_email']=email_content['ship_email'].lower()    # Create the plain-text and HTML version of your message    #text    html = """\    <html>      <body>        <p>Hi,<br>           Registration Details<br>           <table>           <tr><td>Ship Name :</td><td>{ship_name}</td></tr>           <tr><td>Phone :</td><td>{cap_phone}</td></tr>           <tr><td>Email :</td><td>{ship_email}</td></tr>           <tr><td>Email Password :</td><td>{ship_email_pwd}</td></tr>           <tr><td>System Password :</td><td>{lpgin_pwd}</td></tr>           </table>        </p>        <p>Regards,<br>        SHES Team</p>      </body>    </html>    """    html=html.format(ship_name=email_content['ship_name'], cap_phone=email_content['cap_phone'], \                      ship_email=email_content['ship_email'], ship_email_pwd=email_content['ship_email_pwd'], \                      lpgin_pwd=email_content['lpgin_pwd'])    #message = MIMEMultipart("alternative", None, [MIMEText(text), MIMEText(html, 'html')])    message = MIMEMultipart("alternative", None, [MIMEText(html, 'html')])    message["Subject"] = "Ship Registration Details"    message["From"] = sender_email    message["To"] = receiver_email    # Create secure connection with server and send email    if is_internet_available():        try:            context = ssl.create_default_context()            with smtplib.SMTP_SSL("smtp.gmail.com", 465, context=context) as server:                server.login(sender_email, password)                server.sendmail(sender_email, receiver_email.lower(), message.as_string())                server.close()        except smtplib.SMTPRecipientsRefused as e:            return "Invali Email ID"        # except Exception as e:        #     return "Something Went Wrong"    else:        return "Network Issues, Please check your Internet"    email_content['lpgin_pwd']= computeMD5hash(email_content['lpgin_pwd'])    msgTxt = db._userregi(email_content)    return msgTxtdef sendMedicalRequest(emailMedicalRequest):    sender_email = "suneethactel@gmail.com"    receiver_email = doctorEmail    password = 'cteladmin'    # Create the plain-text and HTML version of your message    # text    html = """\    <html><head></head><body>Basic Info:<br><br>"""    html = html + " Departure Port: -  " + str(emailMedicalRequest['basicInfo'][2]) + """<br>"""    html = html + " Arrival Port: -  " + str(emailMedicalRequest['basicInfo'][3]) + """<br>"""    html = html + " Arrival Time: -  " + str(emailMedicalRequest['basicInfo'][4]) + """<br>"""    html = html + " Present Position: -  " + str(emailMedicalRequest['basicInfo'][5]) + """<br>"""    html = html + " Latitude: -  " + str(emailMedicalRequest['basicInfo'][6]) + """<br>"""    html = html + " Longitude: -  " + str(emailMedicalRequest['basicInfo'][7]) + """<br>"""    html = html + " Temperature: -  " + str(emailMedicalRequest['basicInfo'][8]) + """<br>"""    html = html + " Blood Pressure(mmHg): -  " + str(emailMedicalRequest['basicInfo'][9]) + """<br>"""    html = html + " Pulse rate(Bits/min): -  " + str(emailMedicalRequest['basicInfo'][10]) + """<br>"""    html = html + " Weight(Kg): -  " + str(emailMedicalRequest['basicInfo'][11]) + """<br>"""    html = html + " Symptom: -  " + str(emailMedicalRequest['basicInfo'][12]) + """<br>"""    html = html + " Other Info: -  " + str(emailMedicalRequest['basicInfo'][13]) + """<br>"""    html = html + """</p><br>Informarion:<br><br>"""    for f,value in emailMedicalRequest['Question'].items():        html = html + f + "  -  " + value + """<br>"""    html = html + """</p><p>Regards,<br> SHES Team</p> </body> </html>"""    # message = MIMEMultipart("alternative", None, [MIMEText(text), MIMEText(html, 'html')])    message = MIMEMultipart("alternative", None, [MIMEText(html, 'html')])    message["Subject"] = emailMedicalRequest['subject']    message["From"] = sender_email    message["To"] = receiver_email    for filename in emailMedicalRequest['images']:        # Open PDF file in binary mode        try:            with open(filename, "rb") as attachment:                # Add file as application/octet-stream                # Email client can usually download this automatically as attachment                part = MIMEBase("application", "octet-stream")                part.set_payload(attachment.read())            # Encode file in ASCII characters to send by email            encoders.encode_base64(part)            # Add header as key/value pair to attachment part            part.add_header(                "Content-Disposition",                f"attachment; filename= {filename}",            )            # Add attachment to message and convert message to string            message.attach(part)            #text = message.as_string()        except Exception as e:            print(e)    #print('outside')    # Create secure connection with server and send email    if True:        try:            context = ssl.create_default_context()            with smtplib.SMTP_SSL("smtp.gmail.com", 465, context=context) as server:                server.login(sender_email, password)                server.sendmail(sender_email, receiver_email.lower(), message.as_string())                server.close()        except smtplib.SMTPRecipientsRefused as e:            return "Invali Email ID"        # except Exception as e:        #     return "Something Went Wrong"    else:        return "Network Issues, Please check your Internet"    msgTxt = 'Medical Request Send Successfully'    return msgTxt""" Readinf EMail """def get_first_text_block(msg):    type = msg.get_content_maintype()    if type == 'multipart':        for part in msg.get_payload():            if part.get_content_maintype() == 'text':                return bytes.decode(part.get_payload(decode=1))    elif type == 'text':        return bytes.decode(msg.get_payload(decode=1))def read_email_from_gmail(subject,from_email):    ORG_EMAIL = "@gmail.com"    FROM_EMAIL = "suneethactel" + ORG_EMAIL    FROM_PWD = "cteladmin"    SMTP_SERVER = "imap.gmail.com"    SMTP_PORT = 993    arrFinalReplay = {}    try:        mail = imaplib.IMAP4_SSL(SMTP_SERVER,SMTP_PORT)        mail.login(FROM_EMAIL,FROM_PWD)        mail.select('inbox')        #type, data = mail.search(None, 'ALL')        type, data = mail.search(None, '(FROM "'+from_email+'" SUBJECT "'+subject+'")')        mail_ids = data[0]        #print(mail_ids)        id_list = mail_ids.split()        #first_email_id = int(id_list[0])        latest_email_id = int(id_list[-1])        #print(latest_email_id)        #print(first_email_id)        #for i in range(latest_email_id,first_email_id, -1):        result,data = mail.fetch(str(latest_email_id), '(RFC822)' )        #print(data)        for response_part in data:            #print(response_part)            #print(data[1])            #type(response_part)            if isinstance(response_part, tuple):                #print(str(response_part[1]))        #print(data[0])        #raw_Email = data[0][1]        #print(raw_Email['subject'])                #msg = email.message_from_string(str(response_part[1]))                msg = email.message_from_string(response_part[1].decode("utf-8"))                #print(msg.get_payload)                text = get_first_text_block(msg)                email_subject = msg['subject']                email_from = msg['from']                #print(text, "is of type", str(text))                # print('From : ' + str(email_from) + '\n')                # print('Subject : ' + str(email_subject) + '\n')                # print('Date : ' + str(msg['Date']) + '\n')                # print(text)                arrFinalReplay = {                    'From' :str(email_from),                    'replay_Subject': str(email_subject),                    'Subject': str(subject),                    'Replay_Date': str(msg['Date']),                    'text' : text                }                isTrue = db.updateMedicalRecord(arrFinalReplay)                if isTrue:                    return arrFinalReplay                else:                    return {}                # # stringlist = [x.decode('utf-8') for x in text]                # # print(stringlist)                # #print(text.encode())                # FinalText = text.encode()                # #pdf = FPDF()                # pdf = HTML2PDF()                #                # table = """<table border="0" align="center" width="50%">                #     <thead><tr><th width="30%">Header 1</th><th width="70%">header 2</th></tr></thead>                #     <tbody>                #     <tr><td>cell 1</td><td>cell 2</td></tr>                #     <tr><td>cell 2</td><td>cell 3</td></tr>                #     <tr><td>cell 2</td><td>"""+str(FinalText)+ """</td></tr>                #     </tbody>                #     </table>"""                #                # pdf.add_page()                # pdf.write_html(table)                # pdf.output('simple_table_html2.pdf')                # pdf.add_page()                # pdf.set_font("Arial", size=12)                # pdf.write_html(200, 10, txt=text, ln=1, align="C")                # pdf.output("simple_demo3.pdf")    except:        return arrFinalReplay        print("Unexpected error:", sys.exc_info()[0])